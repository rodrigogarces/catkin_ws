# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~teb_autosize
0.default= True
0.type= bool
0.desc=Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended) 
1.name= ~dt_ref
1.default= 0.3
1.type= double
1.desc=Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1/control_rate) Range: 0.01 to 1.0
2.name= ~dt_hysteresis
2.default= 0.1
2.type= double
2.desc=Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref Range: 0.002 to 0.5
3.name= ~global_plan_overwrite_orientation
3.default= True
3.type= bool
3.desc=Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically 
4.name= ~allow_init_with_backwards_motion
4.default= False
4.type= bool
4.desc=If true, the underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors) 
5.name= ~max_global_plan_lookahead_dist
5.default= 3.0
5.type= double
5.desc=Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size] Range: 0.0 to 50.0
6.name= ~force_reinit_new_goal_dist
6.default= 1.0
6.type= double
6.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting) Range: 0.0 to 10.0
7.name= ~feasibility_check_no_poses
7.default= 5
7.type= int
7.desc=Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval Range: 0 to 50
8.name= ~global_plan_viapoint_sep
8.default= -0.1
8.type= double
8.desc=Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled] Range: -0.1 to 5.0
9.name= ~via_points_ordered
9.default= False
9.type= bool
9.desc=If true, the planner adheres to the order of via-points in the storage container 
10.name= ~exact_arc_length
10.default= False
10.type= bool
10.desc=If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations [-> increased cpu time], otherwise the euclidean approximation is used. 
11.name= ~publish_feedback
11.default= False
11.type= bool
11.desc=Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes) 
12.name= ~max_vel_x
12.default= 0.4
12.type= double
12.desc=Maximum translational velocity of the robot Range: 0.01 to 100.0
13.name= ~max_vel_x_backwards
13.default= 0.2
13.type= double
13.desc=Maximum translational velocity of the robot for driving backwards Range: 0.01 to 100.0
14.name= ~max_vel_y
14.default= 0.0
14.type= double
14.desc=Maximum strafing velocity of the robot (should be zero for non-holonomic robots!) Range: 0.0 to 100.0
15.name= ~max_vel_theta
15.default= 0.3
15.type= double
15.desc=Maximum angular velocity of the robot Range: 0.01 to 100.0
16.name= ~acc_lim_x
16.default= 0.5
16.type= double
16.desc=Maximum translational acceleration of the robot Range: 0.01 to 100.0
17.name= ~acc_lim_y
17.default= 0.5
17.type= double
17.desc=Maximum strafing acceleration of the robot Range: 0.01 to 100.0
18.name= ~acc_lim_theta
18.default= 0.5
18.type= double
18.desc=Maximum angular acceleration of the robot Range: 0.01 to 100.0
19.name= ~min_turning_radius
19.default= 0.0
19.type= double
19.desc=Minimum turning radius of a carlike robot (diff-drive robot: zero) Range: 0.0 to 50.0
20.name= ~wheelbase
20.default= 1.0
20.type= double
20.desc=The distance between the drive shaft and steering axle (only required for a carlike robot with 'cmd_angle_instead_rotvel' enabled); The value might be negative for back-wheeled robots! Range: -10.0 to 10.0
21.name= ~cmd_angle_instead_rotvel
21.default= False
21.type= bool
21.desc=Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check 'axles_distance') 
22.name= ~is_footprint_dynamic
22.default= False
22.type= bool
22.desc=If true, updated the footprint before checking trajectory feasibility 
23.name= ~xy_goal_tolerance
23.default= 0.2
23.type= double
23.desc=Allowed final euclidean distance to the goal position Range: 0.001 to 10.0
24.name= ~yaw_goal_tolerance
24.default= 0.1
24.type= double
24.desc=Allowed final orientation error to the goal orientation Range: 0.001 to 3.2
25.name= ~free_goal_vel
25.default= False
25.type= bool
25.desc=Allow the robot's velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed) 
26.name= ~min_obstacle_dist
26.default= 0.5
26.type= double
26.desc=Minimum desired separation from obstacles Range: 0.0 to 10.0
27.name= ~inflation_dist
27.default= 0.6
27.type= double
27.desc=Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
28.name= ~dynamic_obstacle_inflation_dist
28.default= 0.6
28.type= double
28.desc=Buffer zone around predicted locations of dynamic obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
29.name= ~include_dynamic_obstacles
29.default= False
29.type= bool
29.desc=Specify whether the movement of dynamic obstacles should be predicted by a constant velocity model (this also changes the homotopy class search). If false, all obstacles are considered to be static. 
30.name= ~include_costmap_obstacles
30.default= True
30.type= bool
30.desc=Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented) 
31.name= ~legacy_obstacle_association
31.default= False
31.type= bool
31.desc=If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), otherwise the new one (for each teb pose, find only 'relevant' obstacles). 
32.name= ~obstacle_association_force_inclusion_factor
32.default= 1.5
32.type= double
32.desc=The non-legacy obstacle association technique tries to connect only relevant obstacles with the discretized trajectory during optimization, all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist), e.g. choose 2.0 in order to consider obstacles within a radius of 2.0*min_obstacle_dist. Range: 0.0 to 100.0
33.name= ~obstacle_association_cutoff_factor
33.default= 5.0
33.type= double
33.desc=See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. obstacle_association_force_inclusion_factor is processed first. Range: 1.0 to 100.0
34.name= ~costmap_obstacles_behind_robot_dist
34.default= 1.5
34.type= double
34.desc=Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters) Range: 0.0 to 20.0
35.name= ~obstacle_poses_affected
35.default= 30
35.type= int
35.desc=The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well Range: 0 to 200
36.name= ~no_inner_iterations
36.default= 5
36.type= int
36.desc=Number of solver iterations called in each outerloop iteration Range: 1 to 100
37.name= ~no_outer_iterations
37.default= 4
37.type= int
37.desc=Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations Range: 1 to 100
38.name= ~optimization_activate
38.default= True
38.type= bool
38.desc=Activate the optimization 
39.name= ~optimization_verbose
39.default= False
39.type= bool
39.desc=Print verbose information 
40.name= ~penalty_epsilon
40.default= 0.1
40.type= double
40.desc=Add a small safty margin to penalty functions for hard-constraint approximations Range: 0.0 to 1.0
41.name= ~weight_max_vel_x
41.default= 2.0
41.type= double
41.desc=Optimization weight for satisfying the maximum allowed translational velocity Range: 0.0 to 1000.0
42.name= ~weight_max_vel_y
42.default= 2.0
42.type= double
42.desc=Optimization weight for satisfying the maximum allowed strafing velocity (in use only for holonomic robots) Range: 0.0 to 1000.0
43.name= ~weight_max_vel_theta
43.default= 1.0
43.type= double
43.desc=Optimization weight for satisfying the maximum allowed angular velocity Range: 0.0 to 1000.0
44.name= ~weight_acc_lim_x
44.default= 1.0
44.type= double
44.desc=Optimization weight for satisfying the maximum allowed translational acceleration Range: 0.0 to 1000.0
45.name= ~weight_acc_lim_y
45.default= 1.0
45.type= double
45.desc=Optimization weight for satisfying the maximum allowed strafing acceleration (in use only for holonomic robots) Range: 0.0 to 1000.0
46.name= ~weight_acc_lim_theta
46.default= 1.0
46.type= double
46.desc=Optimization weight for satisfying the maximum allowed angular acceleration Range: 0.0 to 1000.0
47.name= ~weight_kinematics_nh
47.default= 1000.0
47.type= double
47.desc=Optimization weight for satisfying the non-holonomic kinematics Range: 0.0 to 10000.0
48.name= ~weight_kinematics_forward_drive
48.default= 1.0
48.type= double
48.desc=Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot) Range: 0.0 to 1000.0
49.name= ~weight_kinematics_turning_radius
49.default= 1.0
49.type= double
49.desc=Optimization weight for enforcing a minimum turning radius (carlike robots) Range: 0.0 to 1000.0
50.name= ~weight_optimaltime
50.default= 1.0
50.type= double
50.desc=Optimization weight for contracting the trajectory w.r.t transition time Range: 0.0 to 1000.0
51.name= ~weight_obstacle
51.default= 50.0
51.type= double
51.desc=Optimization weight for satisfying a minimum seperation from obstacles Range: 0.0 to 1000.0
52.name= ~weight_inflation
52.default= 0.1
52.type= double
52.desc=Optimization weight for the inflation penalty (should be small) Range: 0.0 to 10.0
53.name= ~weight_dynamic_obstacle
53.default= 50.0
53.type= double
53.desc=Optimization weight for satisfying a minimum seperation from dynamic obstacles Range: 0.0 to 1000.0
54.name= ~weight_dynamic_obstacle_inflation
54.default= 0.1
54.type= double
54.desc=Optimization weight for the inflation penalty of dynamic obstacles (should be small) Range: 0.0 to 10.0
55.name= ~weight_viapoint
55.default= 1.0
55.type= double
55.desc=Optimization weight for minimizing the distance to via-points Range: 0.0 to 1000.0
56.name= ~weight_adapt_factor
56.default= 2.0
56.type= double
56.desc=Some special weights (currently 'weight_obstacle') are repeatedly scaled by this factor in each outer TEB iteration (weight_new: weight_old * factor); Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem. Range: 1.0 to 100.0
57.name= ~enable_multithreading
57.default= True
57.type= bool
57.desc=Activate multiple threading for planning multiple trajectories in parallel 
58.name= ~max_number_classes
58.default= 5
58.type= int
58.desc=Specify the maximum number of allowed alternative homotopy classes (limits computational effort) Range: 1 to 100
59.name= ~selection_cost_hysteresis
59.default= 1.0
59.type= double
59.desc=Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor) Range: 0.0 to 2.0
60.name= ~selection_prefer_initial_plan
60.default= 0.95
60.type= double
60.desc=Specify a cost reduction in the interval (0,1) for the trajectory in the equivalence class of the initial plan.) Range: 0.0 to 1.0
61.name= ~selection_obst_cost_scale
61.default= 100.0
61.type= double
61.desc=Extra scaling of obstacle cost terms just for selecting the 'best' candidate (new_obst_cost: obst_cost*factor) Range: 0.0 to 1000.0
62.name= ~selection_viapoint_cost_scale
62.default= 1.0
62.type= double
62.desc=Extra scaling of via-point cost terms just for selecting the 'best' candidate. (new_viapt_cost: viapt_cost*factor) Range: 0.0 to 100.0
63.name= ~selection_alternative_time_cost
63.default= False
63.type= bool
63.desc=If true, time cost is replaced by the total transition time. 
64.name= ~roadmap_graph_no_samples
64.default= 15
64.type= int
64.desc=Specify the number of samples generated for creating the roadmap graph, if simple_exploration is turend off Range: 1 to 100
65.name= ~roadmap_graph_area_width
65.default= 5.0
65.type= double
65.desc=Specify the width of the area in which sampled will be generated between start and goal [m] (the height equals the start-goal distance) Range: 0.1 to 20.0
66.name= ~roadmap_graph_area_length_scale
66.default= 1.0
66.type= double
66.desc=The length of the rectangular region is determined by the distance between start and goal. This parameter further scales the distance such that the geometric center remains equal!) Range: 0.5 to 2.0
67.name= ~h_signature_prescaler
67.default= 1.0
67.type= double
67.desc=Scale number of obstacle value in order to allow huge number of obstacles. Do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<H<=1) Range: 0.2 to 1.0
68.name= ~h_signature_threshold
68.default= 0.1
68.type= double
68.desc=Two h-signuteres are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold Range: 0.0 to 1.0
69.name= ~obstacle_heading_threshold
69.default= 0.45
69.type= double
69.desc=Specify the value of the normalized scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration) Range: 0.0 to 1.0
70.name= ~viapoints_all_candidates
70.default= True
70.type= bool
70.desc=If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same one as the initial/global plan is attached (no effect in test_optim_node). 
71.name= ~visualize_hc_graph
71.default= False
71.type= bool
71.desc=Visualize the graph that is created for exploring new homotopy classes 
72.name= ~visualize_with_time_as_z_axis_scale
72.default= 0.0
72.type= double
72.desc=If this value is bigger than 0, the trajectory and obstacles are visualized in 3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles. Range: 0.0 to 1.0
73.name= ~shrink_horizon_backup
73.default= True
73.type= bool
73.desc=Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues. 
74.name= ~oscillation_recovery
74.default= True
74.type= bool
74.desc=Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left/right/forward/backwards). 
}
}
# End of autogenerated section. You may edit below.
